{
  "$schema": "https://vega.github.io/schema/vega/v5.2.json",
  "autosize": {
    "type": "fit",
    "contains": "padding"
  },
  "height": 435,
  "width": 615,
  "title": {
    "text": "Where Do Students from Different Continents Pursue Tertiary Education?",
    "font": "Nunito Sans",
    "fontSize": 17,
    "anchor": "start"
  },
  "signals": [
    {
      "name": "selectedYear",
      "value": 2021,
      "bind": {
        "input": "range", 
        "min": 2015,
        "max": 2021,
        "step": 1, 
        "name": "Select Year: "
      }
    },
    {
      "name": "groupSelector",
      "value": false,
      "on": [
        {
          "events": "@groupMark:click!",
          "update": "{stack: datum.stack, stk1: datum.stack == 'stk1' && datum.grpId, stk2: datum.stack == 'stk2' && datum.grpId}"
        },
        {
          "events": [{"type": "click", "markname": "groupReset"}, {"type": "dblclick"}],
          "update": "false"
        }
      ]
    },
    {
      "name": "groupHover",
      "value": {},
      "on": [
        {
          "events": "@groupMark:mouseover",
          "update": "{stk1: datum.stack == 'stk1' && datum.grpId, stk2: datum.stack == 'stk2' && datum.grpId}"
        },
        {"events": "mouseout", "update": "{}"}
      ]
    }
  ],
  "data": [
    {
      "name": "tertiary_education_flow",
      "url": "https://raw.githubusercontent.com/danielkohsj/3179_A2/refs/heads/main/data/dataset_alluvial.csv",
      "format": {
        "type": "csv",
        "parse": {
          "Origin": "string",  
          "Destination": "string",
          "Value": "number",
          "Year": "number"
        }
      },
      "transform": [
        {
          "type": "filter", 
          "expr": "datum['Year'] == selectedYear && datum['Value'] != null"
        },
        {
          "type": "aggregate",
          "groupby": ["Origin", "Destination"], 
          "ops": ["sum"], 
          "fields": ["Value"],
          "as": ["count"]
        },
        {
          "type": "formula",
          "expr": "datum['Origin']",  
          "as": "stk1"
        },
        {
          "type": "formula",
          "expr": "datum['Destination']",
          "as": "stk2"
        },
        {
          "type": "formula",
          "expr": "datum['count']", 
          "as": "size"
        }
      ]
    },
    {
      "name": "nodes",
      "source": "tertiary_education_flow",
      "transform": [
        {
          "type": "filter",
          "expr": "!groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2"
        },
        {"type": "formula", "expr": "datum.stk1 + datum.stk2", "as": "key"},
        {"type": "fold", "fields": ["stk1", "stk2"], "as": ["stack", "grpId"]},
        {
          "type": "formula",
          "expr": "datum.stack == 'stk1' ? datum.stk1 + ' ' + datum.stk2 : datum.stk2 + ' ' + datum.stk1",
          "as": "sortField"
        },
        {
          "type": "stack",
          "groupby": ["stack"],
          "sort": {"field": "sortField", "order": "descending"},
          "field": "size"
        },
        {
          "type": "formula", 
          "expr": "(datum.y0 + datum.y1) / 2", 
          "as": "yc"
        }
      ]
    },
    {
      "name": "groups",
      "source": "nodes",
      "transform": [
        {
          "type": "aggregate",
          "groupby": ["stack", "grpId"],
          "fields": ["size"],
          "ops": ["sum"],
          "as": ["total"]
        },
        {
          "type": "stack",
          "groupby": ["stack"],
          "sort": {"field": "grpId", "order": "descending"},
          "field": "total"
        },
        {"type": "formula", "expr": "scale('y', datum.y0)", "as": "scaledY0"},
        {"type": "formula", "expr": "scale('y', datum.y1)", "as": "scaledY1"},
        {
          "type": "formula",
          "expr": "datum.stack == 'stk1'",
          "as": "rightLabel"
        },
        {
          "type": "formula",
          "expr": "datum.total / domain('y')[1]",
          "as": "percentage"
        }
      ]
    },
    {
      "name": "destinationNodes",
      "source": "nodes",
      "transform": [{"type": "filter", "expr": "datum.stack == 'stk2'"}]
    },
    {
      "name": "edges",
      "source": "nodes",
      "transform": [
        {"type": "filter", "expr": "datum.stack == 'stk1'"},
        {
          "type": "lookup",
          "from": "destinationNodes",
          "key": "key",
          "fields": ["key"],
          "as": ["target"]
        },
        {
          "type": "linkpath",
          "orient": "horizontal",
          "shape": "diagonal",
          "sourceY": {"expr": "scale('y', datum.yc)"},
          "sourceX": {"expr": "scale('x', 'stk1') + bandwidth('x')"},
          "targetY": {"expr": "scale('y', datum.target.yc)"},
          "targetX": {"expr": "scale('x', 'stk2')"}
        },
        {
          "type": "formula",
          "expr": "datum.size > 0 ? range('y')[0] - scale('y', datum.size) : 0",
          "as": "strokeWidth"
        },
        {
          "type": "formula",
          "expr": "datum.size / domain('y')[1]",
          "as": "percentage"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "band",
      "range": "width",
      "domain": ["stk1", "stk2"],
      "paddingInner": 0.95
    },
    {
      "name": "y",
      "type": "linear",
      "range": "height",
      "domain": {"data": "nodes", "field": "y1"},
      "nice": true
    },
    {
      "name": "color",
      "type": "ordinal",
      "range": "category",
      "domain": {"data": "tertiary_education_flow", "fields": ["stk1", "stk2"]}
    },
    {
      "name": "stackNames",
      "type": "ordinal",
      "range": ["Origin", "Destination"],
      "domain": ["stk1", "stk2"]
    }
  ],
  "marks": [
    {
      "type": "path",
      "name": "edgeMark",
      "from": {"data": "edges"},
      "clip": true,
      "encode": {
        "update": {
          "stroke": [
            {
              "test": "groupSelector && groupSelector.stack == 'stk1'",
              "scale": "color",
              "field": "stk2"
            },
            {"scale": "color", "field": "stk1"}
          ],
          "strokeWidth": {"field": "strokeWidth"},
          "path": {"field": "path"},
          "strokeOpacity": {
            "signal": "!groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3"
          },
          "zindex": {
            "signal": "!groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0"
          },
          "tooltip": {
            "signal": "datum.stk1 + ' â†’ ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'"
          }
        },
        "hover": {"strokeOpacity": {"value": 1}}
      }
    },
    {
      "type": "rect",
      "name": "groupMark",
      "from": {"data": "groups"},
      "encode": {
        "enter": {
          "fill": {"scale": "color", "field": "grpId"},
          "width": {"scale": "x", "band": 1}
        },
        "update": {
          "x": {"scale": "x", "field": "stack"},
          "y": {"field": "scaledY0"},
          "y2": {"field": "scaledY1"},
          "fillOpacity": [
            {
              "test": "groupSelector && (groupSelector.stk1 == datum.grpId || groupSelector.stk2 == datum.grpId)",
              "value": 1
            },
            {"value": 0.6}
          ],
          "tooltip": {
            "signal": "datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'"
          }
        },
        "hover": {"fillOpacity": {"value": 1}}
      }
    },
    {
      "type": "text",
      "from": {"data": "groups"},
      "interactive": false,
      "encode": {
        "update": {
          "x": {
            "signal": "scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)"
          },
          "yc": {"signal": "(datum.scaledY0 + datum.scaledY1) / 2"},
          "align": {"signal": "datum.rightLabel ? 'left' : 'right'"},
          "baseline": {"value": "middle"},
          "fontWeight": {"value": "bold"},
          "font": {"value": "Nunito Sans"},
          "text": {
            "signal": "abs(datum.scaledY0 - datum.scaledY1) > 13 ? datum.grpId : ''"
          }
        }
      }
    }
  ],
  "config": {
    "title": {"font": "Nunito Sans"},
    "axis": {"labelFont": "Nunito Sans", "titleFont": "Nunito Sans"},
    "legend": {"labelFont": "Nunito Sans", "titleFont": "Nunito Sans"},
    "text": {"font": "Nunito Sans"}
  }
}